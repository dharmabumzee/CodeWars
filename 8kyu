// EXAMPLE_1 //
// Student's final grade //
// firstSolution //

function finalGrade (exam, projects) {
  if ( exam > 90 || projects > 10) {
    return 100;
  } else if ( exam > 75 && projects >= 5) {
    return 90;
  } else if ( exam > 50 && projects >= 2) {
    return 75;
  } else {
    return 0;
    }
}

// secondSolution //

const finalGrade = (exam, projects) => {
  return (
    exam > 90 || projects > 10 ? 100 :
    exam > 75 && projects >= 5 ? 90 :
    exam > 50 && projects >= 2 ? 75 : 0
  );
}

  // Sample tests //

  describe("Sample tests", function(){
    Test.assertEquals(finalGrade(100, 12), 100);
    Test.assertEquals(finalGrade(85, 5), 90);
  });

// EXAMPLE_2 //
// Count the monkeys! //
// firstSolution //

function monkeyCount(n) {
  var count = [];
  var i = 1;
  while (i <= n) {
    count.push(i);
    i++;
  } 
  return count;
}

// secondSolution //

function monkeyCount(n) {
  for (var i = 0, monkeys = []; i < n; monkeys.push(++i));
  return monkeys;
}

  // Sample tests //

  Test.describe("monkeyCount", _ => {
    Test.assertSimilar((monkeyCount(5)), [1, 2, 3, 4, 5]);
    Test.assertSimilar((monkeyCount(3)), [1, 2, 3]);
    Test.assertSimilar((monkeyCount(9)), [1, 2, 3, 4, 5, 6, 7, 8, 9]);
    Test.assertSimilar((monkeyCount(10)), [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);
    Test.assertSimilar((monkeyCount(20)), [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]);
  });
  

// EXAMPLE_3 //
// Count by X //
// firstSolution //

function countBy(x, n) {
  var z = []; 
  var step = x;
  for (var i = 0; i < n; i++) {
    z.push(x);
    x += step;
  }
  return z;
}

// secondSolution //

function countBy(x, n) {
  var z = [];
  while (z.length < n) z.push(x * (z.length + 1));
  return z;
}

  // Sample tests //

  Test.assertSimilar(countBy(1,5), [1,2,3,4,5], "Array does not match")
  Test.assertSimilar(countBy(2,5), [2,4,6,8,10], "Array does not match")


// EXAMPLE_4 //
// Count odd numbers below n //

function oddCount(n){
  return Math.floor(n / 2);
}

  // Sample tests //

  Test.assertEquals(oddCount(15), 7, "Oops! Wrong.");
  Test.assertEquals(oddCount(15023), 7511, "Oops! Wrong.");

// EXAMPLE_5 // 
// Convert a boolean to a string //
// firstSolution //

function booleanToString(b){
  if (b === true) {
    return "true";
  } else {
  return "false";
  }
}

// secondSolution //

function booleanToString(b){
  return b.toString();
}

  // Sample tests //

  Test.assertEquals(booleanToString(true), "true", 'When we pass in true, we want the string "true" as output');
  Test.assertEquals(booleanToString(false), "false", 'When we pass in false, we want the string "false" as output');

// EXAMPLE_6 //
// Sum of positive //
// firstSolution //

function positiveSum(arr) {
  var sum = 0;
  for (var i = 0; i <= arr.length; i++) {
    if (arr[i] >= 0) {
      sum += arr[i];
    } 
  }
  return sum;
}

// secondSolution //

function positiveSum(arr) {
  return arr
      .filter(x => x > 0)
      .reduce((x, y) => x + y, 0);
}

  // Sample tests //

  Test.assertEquals(positiveSum([1,2,3,4,5]),15);
  Test.assertEquals(positiveSum([1,-2,3,4,5]),13);
  Test.assertEquals(positiveSum([]),0);
  Test.assertEquals(positiveSum([-1,-2,-3,-4,-5]),0);
  Test.assertEquals(positiveSum([-1,2,3,4,-5]),9);
  
// EXAMPLE_7 //
// Will there be enough space? // 
// firstSolution //

function enough(cap, on, wait) {
  var sum = cap - (on + wait);
  if (sum > 0) {
    return 0;
  } else {
  return Math.abs(sum);
  }
}

// secondSolution //

function enough(cap, on, wait) {
 return Math.max(wait + on - cap, 0);
}

  // Sample tests // 

  describe('Example Tests', function(){
    Test.assertEquals(enough(10, 5, 5), 0);
    Test.assertEquals(enough(100, 60, 50), 10);
    Test.assertEquals(enough(20, 5, 5), 0);
  });

// EXAMPLE_8 //
// Surface area and volume of a box //
// firstSolution //

function getSize(width, height, depth) {
  var surface = 2 * (height * width) + 2 * (height * depth) + 2 * (width * depth);
  var volume = height * width * depth;
  return [surface, volume];
}

// secondSolution //

const getSize = (w, h, d) => [2*(w * h + w * d + h*d), w*h*d];

  // Sample tests //

  Test.assertEquals(getSize(4, 2, 6)[1], 48);
  Test.assertSimilar(getSize(10, 10, 10), [600, 1000]);
  Test.assertEquals(getSize(4, 2, 6)[0], 88);
  Test.assertEquals(getSize(4, 2, 6)[1], 48);
  
// EXAMPLE_9 //
// Remove first and last character //
// firstSolution //

function removeChar(str){
 return str.slice(1, str.length - 1);
};

// secondSolution //

function removeChar(str){
 return str.slice(1, -1);
};


  // Sample tests //

  Test.describe("Tests", function(){

  Test.assertEquals(removeChar('eloquent'), 'loquen');
  Test.assertEquals(removeChar('country'), 'ountr');
  Test.assertEquals(removeChar('person'), 'erso');
  Test.assertEquals(removeChar('place'), 'lac');

  });

// EXAMPLE_10 //
// Get character from ASCII value //
// firstSolution //

function getChar(c){
  return String.fromCharCode(c);
}

// secondSolution //

const getChar = c => String.fromCharCode(c);

  // Sample tests //

  Test.assertEquals(getChar(55),'7')
  Test.assertEquals(getChar(56),'8')
  Test.assertEquals(getChar(57),'9')
  Test.assertEquals(getChar(58),':')
  Test.assertEquals(getChar(59),';')
  Test.assertEquals(getChar(60),'<')
  Test.assertEquals(getChar(61),'=')
  Test.assertEquals(getChar(62),'>')
  Test.assertEquals(getChar(63),'?')
  Test.assertEquals(getChar(64),'@')
  Test.assertEquals(getChar(65),'A')

// EXAMPLE_11 //
// Correct the mistakes of the character recognition software //
// firstSolution // 

function correct(string) {
 return string.replace(/5/g, "S").replace(/0/g, "O").replace(/1/g, "I");
}

// secondSolution //

const correct = string => string.replace(/5/g, "S").replace(/0/g, "O").replace(/1/g, "I");

  // Sample tests //

  Test.assertEquals(correct("L0ND0N"),"LONDON");
  Test.assertEquals(correct("DUBL1N"),"DUBLIN");
  Test.assertEquals(correct("51NGAP0RE"),"SINGAPORE");
  Test.assertEquals(correct("BUDAPE5T"),"BUDAPEST");
  Test.assertEquals(correct("PAR15"),"PARIS");
  
// EXAMPLE_12 //
// L1: Set Alarm //
// firstSolution //

function setAlarm(employed, vacation){
   return (employed !== false && vacation !== true) 
}

// secondSolution //

function setAlarm(employed, vacation){
  return employed && !vacation;
}

  // Sample tests //

  Test.expect(!setAlarm(true, true), "Should be false.");
  Test.expect(!setAlarm(false, true), "Should be false.");
  Test.expect(setAlarm(true, false), "Should be true.");

// EXAMPLE_13 //
// MakeUpperCase //
// firstSolution //

function makeUpperCase(str) {
  return str.toUpperCase();
}

// secondSolution //

const makeUpperCase = str => str.toUpperCase();

  // Sample tests //

  describe("Basic Tests", function(){
    it("should pass the basic tests", function(){
      Test.assertEquals(makeUpperCase("hello"), "HELLO");
    });
  });

// EXAMPLE_14 //
// Hex to Decimal //
// firstSolution //

function hexToDec(hexString){
  return parseInt(hexString, 16);
}

// secondSolution //

const hexToDec = hexString => parseInt(hexString, 16);r

  // Sample tests //

  Test.describe("Example Tests",_=>{
  Test.assertEquals(hexToDec("1"), 1);
  Test.assertEquals(hexToDec("a"), 10);
  Test.assertEquals(hexToDec("10"), 16);
  Test.assertEquals(hexToDec("FF"), 255);
  Test.assertEquals(hexToDec("-C"), -12);
  })

// EXAMPLE_15 //
// Reduce but grow - Given a non-empty array of integers, return the result of multiplying the values together in order //
// firstSolution //

function grow(x){
  var sum = 1;
  for ( var i = 0; i < x.length; i++ ) {
    sum = sum * x[i];
  }
  return sum;
}

// secondSolution //

function grow(x){
  return x.reduce((a,b) => (a*b));
}


  // Sample tests //

  Test.describe("Example tests",_=>{
  Test.assertEquals(grow([1, 2, 3]), 6);
  Test.assertEquals(grow([4, 1, 1, 1, 4]), 16); 
  Test.assertEquals(grow([2, 2, 2, 2, 2, 2]), 64); 
  });

// EXAMPLE_16 //
// How good are you really? - You got an array with your colleges' points. Now calculate the average to your points! //
// Your points are not included in the array of your classes points. //
// For calculating the average point you may add your point to the given array! //

// firstSolution //

function betterThanAverage(classPoints, yourPoints) {
  var average = (classPoints.reduce((a,b) => (a + b),0) + yourPoints) / (classPoints.length + 1);
  return result = (average < yourPoints) ? true : false;
}

// secondSolution //

function betterThanAverage(classPoints, yourPoints) {
  return yourPoints > (classPoints.reduce((a,b) => (a+b)) + yourPoints) / (classPoints.length+1)
}


  // Sample tests //

  Test.describe("Example Tests", function() {
    Test.it("betterThanAverage([2, 3], 5) should return True", function() {
      Test.assertEquals(betterThanAverage([2, 3], 5), true);
    });

    Test.it("betterThanAverage([100, 40, 34, 57, 29, 72, 57, 88], 75) should return True", function() {
      Test.assertEquals(betterThanAverage([100, 40, 34, 57, 29, 72, 57, 88], 75), true);
    });

    Test.it("betterThanAverage([12, 23, 34, 45, 56, 67, 78, 89, 90], 9) should return False", function() {
      Test.assertEquals(betterThanAverage([12, 23, 34, 45, 56, 67, 78, 89, 90], 9), false);
    });
  });

// EXAMPLE_17 //
// Given a non-negative integer n, write a function toBinary/ToBinary which returns that number in a binary format. //

const toBinary = n => parseInt(n.toString(2));

  // Sample tests //

  Test.describe("Tests", function(){

  Test.assertEquals(toBinary(1), 1);
  Test.assertEquals(toBinary(2), 10);
  Test.assertEquals(toBinary(3), 11);
  Test.assertEquals(toBinary(5), 101);

  });

// EXAMPLE_18 //
// Complete the square sum function so that it squares each number passed into it and then sums the results together //
// firstSolution //

function squareSum(numbers){
  let result = 0;
  for (let i = 0; i < numbers.length; i++) {
  result += Math.pow(numbers[i], 2);
}
  return result;
}

// secondSolution //

function squareSum(numbers){
  return numbers.reduce((sum,num) => sum + Math.pow(num, 2), 0);
}

  // Sample tests //

  Test.assertEquals(squareSum([1,2]), 5)
  Test.assertEquals(squareSum([0, 3, 4, 5]), 50)

// EXAMPLE_19 //
// Given an array of integers, return a new array with each value doubled //

const maps = x => x.map( x => x * 2 );

  // Sample tests //

  Test.describe("Example tests",()=>{
    Test.assertDeepEquals(maps([1, 2, 3]), [2, 4, 6]);
    Test.assertDeepEquals(maps([4, 1, 1, 1, 4]), [8, 2, 2, 2, 8]); 
    Test.assertDeepEquals(maps([2, 2, 2, 2, 2, 2]), [4, 4, 4, 4, 4, 4]); 
  });

