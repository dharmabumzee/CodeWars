## Sums of Parts
https://www.codewars.com/kata/sums-of-parts/

Let us consider this example (array written in general format):

```ls = [0, 1, 3, 6, 10]```

Its following parts:

```ls = [0, 1, 3, 6, 10]```
```ls = [1, 3, 6, 10]```
```ls = [3, 6, 10]```
```ls = [6, 10]```
```ls = [10]```
```ls = []```

The corresponding sums are (put together in a list): ```[20, 20, 19, 16, 10, 0]```

The function ```parts_sums``` (or its variants in other languages) will take as parameter a list ```ls``` and return a list of the sums of its parts as defined above.

###### Other Examples:
```ls = [1, 2, 3, 4, 5, 6] ```
```parts_sums(ls) -> [21, 20, 18, 15, 11, 6, 0]```

```ls = [744125, 935, 407, 454, 430, 90, 144, 6710213, 889, 810, 2579358]```
```parts_sums(ls) -> [10037855, 9293730, 9292795, 9292388, 9291934, 9291504, 9291414, 9291270, 2581057, 2580168, 2579358, 0]```
###### Notes
Some lists can be long.
Please ask before translating: some translations are already written and published when/if the kata is approved.

```javascript
function partsSums(ls) {
    let sum = ls.reduce((a,b) => a + b, 0);
    return [sum, ...ls.map(x => sum -= x)];
}
```

## Give me a Diamond
https://www.codewars.com/kata/give-me-a-diamond/

Jamie is a programmer, and James' girlfriend. She likes diamonds, and wants a diamond string from James. Since James doesn't know how to make this happen, he needs your help.

###### Task
You need to return a string that looks like a diamond shape when printed on the screen, using asterisk (```*```) characters. Trailing spaces should be removed, and every line must be terminated with a newline character (```\n```).

Return ```null/nil/None/...``` if the input is an even number or negative, as it is not possible to print a diamond of even or negative size.

###### Examples
A size 3 diamond:
```
 *
***
 *
 ```
...which would appear as a string of ```" *\n***\n *\n"```

A size 5 diamond:
```
  *
 ***
*****
 ***
  *
  ```
...that is: ```" *\n ***\n*****\n ***\n *\n"```


```javascript
function diamond(n){
  if (n < 1 || n % 2 == 0) return null;
  return Array.apply(null, {length: n})
    .map((e, i) => {
      const spaces = Math.abs(i - (Math.floor(n / 2)));
      const draw = n - spaces * 2;
      return Array(spaces + 1).join(' ') + Array(draw + 1).join('*');
    })
    .join('\n') + '\n';
  }
```
