// Example_1 //
// Is this a triangle? //
// firstSolution //

function isTriangle(a,b,c) {
    if ((a + b > c) && (a + c > b) && (b + c > a)) {
      return true;
    } else {
     return false;
  }
}

// secondSolution //

function isTriangle(a,b,c) {
   return a + b > c && a + c > b && b + c > a;
}

 // Sample test

Test.describe("PublicTest", function() {
    Test.assertEquals(isTriangle(1,2,2), true);
    Test.assertEquals(isTriangle(7,2,2), false);
});


// Example_2 //
// Friend or Foe?
// Make a program that filters a list of strings and returns a list with only your friends name in it. //
// If a name has exactly 4 letters in it, you can be sure that it has to be a friend of yours! //

// firstSolution //

function friend(friends){
  var realFriends = [];
  for (var i = 0; i < friends.length; i++ ) {
    if (friends[i].length == 4) {
      realFriends.push(friends[i]);
    } 
  }
  return realFriends;
}

// secondSolution //

function friend(friends){
  return friends.filter(n => n.length === 4);
}


    // Sample tests

    Test.assertSimilar(friend(["Ryan", "Kieran", "Mark"]), ["Ryan", "Mark"]);
    Test.assertSimilar(friend(["Ryan", "Jimmy", "123", "4", "Cool Man"]), ["Ryan"]);
    Test.assertSimilar(friend(["Jimm", "Cari", "aret", "truehdnviegkwgvke", "sixtyiscooooool"]), ["Jimm", "Cari", "aret"]);
    Test.assertSimilar(friend(["Love", "Your", "Face", "1"]), ["Love", "Your", "Face"]);


// Example_3 //
// Reverse words //
// firstSolution // 

function reverseWords(str) {
 return str.split("").reverse().join("").split(/\s/g).reverse().join(" ");
}

// secondSolution //

function reverseWords(str) {
  return str.split(" ").map(str => str.split("").reverse().join("")).join(" ");
}

    // Sample tests //

    Test.describe('Sample Tests', _ => {
      Test.it('Should pass Sample tests', _ => {
        Test.assertEquals(reverseWords('The quick brown fox jumps over the lazy dog.'), 'ehT kciuq nworb xof spmuj revo eht yzal .god');
        Test.assertEquals(reverseWords('apple'), 'elppa');
        Test.assertEquals(reverseWords('a b c d'), 'a b c d');
        Test.assertEquals(reverseWords('double  spaced  words'), 'elbuod  decaps  sdrow');
      });
    });


// Example_4 //
// Descending order //

function descendingOrder(n){
  return parseInt(Array.from(String(n), Number).sort((a,b) => b - a).join(""));
}

    // Sample tests //

    Test.assertEquals(descendingOrder(0), 0)
    Test.assertEquals(descendingOrder(1), 1)
    Test.assertEquals(descendingOrder(123456789), 987654321)
    
// Example_5 //
// The Club Doorman will give you a word. 
// To enter the Club you need to provide the right number according to provided the word.
// Every given word has a doubled letter, like 'tt' in lettuce.
// You need to find the doubled letter's position of the given word in the alphabet and multiply this number per 3.

// firstSolution
 
 function passTheDoorMan (word){
  var doubleLetter;
  for (var i = 0; i < word.length-1; i++) 
    if (word[i] == word[i+1]) {
      doubleLetter = word[i];
      break;
    }
  return (doubleLetter.charCodeAt()-96)*3;
}

// secondSolution //

const passTheDoorMan = word => ((word.match(/(.)\1/)[1]).charCodeAt(0) - 96) * 3;

    // Sample tests //

     describe("Club Doorman", function(){
       it("Basic Tests", function(){
        Test.assertSimilar( passTheDoorMan("lettuce") , 60);
        Test.assertSimilar( passTheDoorMan("hill"), 36);
        Test.assertSimilar( passTheDoorMan("apple"), 48);
      });
     });  

// Example_6 //
// Simple Fun #152: Invite More Women? //
// firstSolution //

function inviteMoreWomen(L) {
  var men = 0;
  var women = 0;
  for (var i = 0; i < L.length; i++) {
    if ( L[i] > 0 ) {
      men += 1;
    } else {
      women += 1;
    }
  }
  
  if (men > women) {
    return true;
  } else {
    return false;
  }
}

// secondSolution

const inviteMoreWomen = L => L.reduce((a,b) => a+b) > 0;


    // Sample tests //

    describe("Basic Tests", function(){
    it("It should works for basic tests.", function(){

    Test.assertEquals(inviteMoreWomen([1, -1, 1]),true)

    Test.assertEquals(inviteMoreWomen([1, 1, 1]),true)

    Test.assertEquals(inviteMoreWomen([-1, -1, -1]),false)

    Test.assertEquals(inviteMoreWomen([1, -1]),false)

    })})

// Example_7 //
// Your task is to write a function that takes a string and return a new string with all vowels removed //

const disemvowel = str => str.replace(/[aeiou]/gi, '');

    // Sample tests //

    Test.assertEquals(disemvowel("This website is for losers LOL!"),
      "Ths wbst s fr lsrs LL!")
  
  // Example_8 //
  // return the first m multiples of n //
  // firstSolution //
  
 function multiples(m, n){
    let result = [];
    for (let i = 1; i <= m; i++) {
        result.push(i*n);
 }
    return result;
}

// secondSolution

const multiples = (m, n) => Array.from(Array(m), (_, i) => n* i + n);



    // Sample tests //

    Test.assertDeepEquals(multiples(3, 5), [5, 10, 15])

// Example_8 
// Complementary DNA

// firstSolution

function DNAStrand(dna){
  let complementDNA = '';
  for(let i = 0; i < dna.length; i++){
    if(dna[i] === 'T'){
      complementDNA += 'A';
    }
    if(dna[i] === 'A'){
      complementDNA += 'T';
    }
    if(dna[i] === 'C'){
      complementDNA += 'G';
    }
    if(dna[i] === 'G'){
      complementDNA += 'C';
    }
  }
  return complementDNA;
}


// secondSolution

const DNAStrand = dna => dna.replace(/./g, x => "ATCG"["TAGC".indexOf(x)]);

    // Sample tests

    Test.assertEquals(DNAStrand("AAAA"),"TTTT","String AAAA is");
    Test.assertEquals(DNAStrand("ATTGC"),"TAACG","String ATTGC is");
    Test.assertEquals(DNAStrand("GTAT"),"CATA","String GTAT is");
    
    
// Example_9
// Given the triangle of consecutive odd numbers:

             1
          3     5
       7     9    11
   13    15    17    19
21    23    25    27    29
...


const rowSumOddNumbers = n => Math.pow(n, 3);

    // Sample tests

    Test.assertEquals(rowSumOddNumbers(1), 1);
    Test.assertEquals(rowSumOddNumbers(42), 74088);


// Example_10
// Your task is to add up letters to one letter.
// The function will be given a variable amount of arguments, each one being a letter to add.
// Notes:
// Letters will always be lowercase.
// Letters can overflow (see second to last example of the description)
// If no letters are given, the function should return 'z'

const addLetters = (...letters) => String.fromCharCode((letters.reduce((sum, x) => sum + x.charCodeAt() - 96, 0) % 26 || 26) + 96);


    // Sample tests

    addLetters('a', 'b', 'c') = 'f'
    addLetters('a', 'b') = 'c'
    addLetters('z') = 'z'
    addLetters('z', 'a') = 'a'
    addLetters('y', 'c', 'b') = 'd' // notice the letters overflowing
    addLetters() = 'z'
    
    
// Example_11
// All we eat is water and dry matter.
// John bought potatoes: their weight is 100 kilograms. Potatoes contain water and dry matter.
// The water content is 99 percent of the total weight. He thinks they are too wet and puts them in an oven - at low temperature - for them to lose some water.
// At the output the water content is only 98%.
// What is the total weight in kilograms (water content plus dry matter) coming out of the oven?
// He finds 50 kilograms and he thinks he made a mistake: "So much weight lost for such a small change in water content!"
// Can you help him?
// Write function potatoes with
// int parameter p0 - initial percent of water-
// int parameter w0 - initial weight -
// int parameter p1 - final percent of water -
// potatoesshould return the final weight coming out of the oven w1 truncated as an int.
// Example:
// potatoes(99, 100, 98) --> 50


const potatoes = (p0, w0, p1) => Math.floor(w0 * (100 - p0) / (100 - p1));


    // Sample tests

    Test.describe("Basic tests",function() {
        Test.it("potatoes",function() {
            Test.assertEquals(potatoes(82, 127, 80), 114);
            Test.assertEquals(potatoes(93, 129, 91), 100);

    })})
