// Example_1 //
// Is this a triangle? //
// firstSolution //

function isTriangle(a,b,c) {
    if ((a + b > c) && (a + c > b) && (b + c > a)) {
      return true;
    } else {
     return false;
  }
}

// secondSolution //

function isTriangle(a,b,c) {
   return a + b > c && a + c > b && b + c > a;
}

 // Sample test

Test.describe("PublicTest", function() {
    Test.assertEquals(isTriangle(1,2,2), true);
    Test.assertEquals(isTriangle(7,2,2), false);
});


// Example_2 //
// Friend or Foe?
// Make a program that filters a list of strings and returns a list with only your friends name in it. //
// If a name has exactly 4 letters in it, you can be sure that it has to be a friend of yours! //

// firstSolution //

function friend(friends){
  var realFriends = [];
  for (var i = 0; i < friends.length; i++ ) {
    if (friends[i].length == 4) {
      realFriends.push(friends[i]);
    } 
  }
  return realFriends;
}

// secondSolution //

function friend(friends){
  return friends.filter(n => n.length === 4);
}


    // Sample tests

    Test.assertSimilar(friend(["Ryan", "Kieran", "Mark"]), ["Ryan", "Mark"]);
    Test.assertSimilar(friend(["Ryan", "Jimmy", "123", "4", "Cool Man"]), ["Ryan"]);
    Test.assertSimilar(friend(["Jimm", "Cari", "aret", "truehdnviegkwgvke", "sixtyiscooooool"]), ["Jimm", "Cari", "aret"]);
    Test.assertSimilar(friend(["Love", "Your", "Face", "1"]), ["Love", "Your", "Face"]);


// Example_3 //
// Reverse words //
// firstSolution // 

function reverseWords(str) {
 return str.split("").reverse().join("").split(/\s/g).reverse().join(" ");
}

// secondSolution //

function reverseWords(str) {
  return str.split(" ").map(str => str.split("").reverse().join("")).join(" ");
}

    // Sample tests //

    Test.describe('Sample Tests', _ => {
      Test.it('Should pass Sample tests', _ => {
        Test.assertEquals(reverseWords('The quick brown fox jumps over the lazy dog.'), 'ehT kciuq nworb xof spmuj revo eht yzal .god');
        Test.assertEquals(reverseWords('apple'), 'elppa');
        Test.assertEquals(reverseWords('a b c d'), 'a b c d');
        Test.assertEquals(reverseWords('double  spaced  words'), 'elbuod  decaps  sdrow');
      });
    });


// Example_4 //
// Descending order //

function descendingOrder(n){
  return parseInt(Array.from(String(n), Number).sort((a,b) => b - a).join(""));
}

    // Sample tests //

    Test.assertEquals(descendingOrder(0), 0)
    Test.assertEquals(descendingOrder(1), 1)
    Test.assertEquals(descendingOrder(123456789), 987654321)
    
// Example_5 //
// The Club Doorman will give you a word. 
// To enter the Club you need to provide the right number according to provided the word.
// Every given word has a doubled letter, like 'tt' in lettuce.
// You need to find the doubled letter's position of the given word in the alphabet and multiply this number per 3.

// firstSolution
 
 function passTheDoorMan (word){
  var doubleLetter;
  for (var i = 0; i < word.length-1; i++) 
    if (word[i] == word[i+1]) {
      doubleLetter = word[i];
      break;
    }
  return (doubleLetter.charCodeAt()-96)*3;
}

// secondSolution //

const passTheDoorMan = word => ((word.match(/(.)\1/)[1]).charCodeAt(0) - 96) * 3;

    // Sample tests //

     describe("Club Doorman", function(){
       it("Basic Tests", function(){
        Test.assertSimilar( passTheDoorMan("lettuce") , 60);
        Test.assertSimilar( passTheDoorMan("hill"), 36);
        Test.assertSimilar( passTheDoorMan("apple"), 48);
      });
     });  

// Example_6 //
// Simple Fun #152: Invite More Women? //
// firstSolution //

function inviteMoreWomen(L) {
  var men = 0;
  var women = 0;
  for (var i = 0; i < L.length; i++) {
    if ( L[i] > 0 ) {
      men += 1;
    } else {
      women += 1;
    }
  }
  
  if (men > women) {
    return true;
  } else {
    return false;
  }
}

// secondSolution

const inviteMoreWomen = L => L.reduce((a,b) => a+b) > 0;


    // Sample tests //

    describe("Basic Tests", function(){
    it("It should works for basic tests.", function(){

    Test.assertEquals(inviteMoreWomen([1, -1, 1]),true)

    Test.assertEquals(inviteMoreWomen([1, 1, 1]),true)

    Test.assertEquals(inviteMoreWomen([-1, -1, -1]),false)

    Test.assertEquals(inviteMoreWomen([1, -1]),false)

    })})

// Example_7 //
// Your task is to write a function that takes a string and return a new string with all vowels removed //

const disemvowel = str => str.replace(/[aeiou]/gi, '');

    // Sample tests //

    Test.assertEquals(disemvowel("This website is for losers LOL!"),
      "Ths wbst s fr lsrs LL!")
  
  // Example_8 //
  // return the first m multiples of n //
  // firstSolution //
  
 function multiples(m, n){
    let result = [];
    for (let i = 1; i <= m; i++) {
        result.push(i*n);
 }
    return result;
}

    // Sample tests //

    Test.assertDeepEquals(multiples(3, 5), [5, 10, 15])
